
-- CRIAÇÃO DA TABELA E INSERCAO DE DADOS

CREATE EXTENSION IF NOT EXISTS "UUID-OSSP";

CREATE TABLE IF NOT EXISTS CLIENTS (
ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(), LIMITE INTEGER NOT NULL, SALDO INTEGER NOT NULL, CHECK (SALDO >= -LIMITE), CHECK(LIMITE > 0)
);

CREATE TABLE IF NOT EXISTS TRANSACTIONS (
ID SERIAL PRIMARY KEY NOT NULL, TIPO CHAR(1) NOT NULL, DESCRICAO VARCHAR(10) NOT NULL, VALOR INTEGER NOT NULL, CLIENTE_ID INTEGER NOT NULL, REALIZADA_EM TIMESTAMP NOT NULL DEFAULT NOW()
);

INSERT INTO CLIENTS (LIMITE, SALDO)
VALUES
(100000, 0),(80000, 0),(1000000, 0),(10000000, 0),(500000, 0);

-- STORED PROCEDURE

CREATE OR REPLACE PROCEDURE VER_EXTRATO(
IN P_CLIENTE_ID INTEGER
)
LANGUAGE PLPGSQL
AS $$
DECLARE
SALDO_ATUAL INTEGER;

TRANSACAO RECORD;

CONTADOR INTEGER := 0;

BEGIN
-- OBTÉM O SALDO ATUAL DO CLIENTE
SELECT SALDO INTO SALDO_ATUAL
FROM CLIENTS
WHERE ID = P_CLIENTE_ID;
-- RETORNA O SALDO ATUAL DO CLIENTE
RAISE NOTICE 'SALDO ATUAL DO CLIENTE: %', SALDO_ATUAL;
-- RETORNA AS 10 ÚLTIMAS TRANSAÇÕES DO CLIENTE
RAISE NOTICE 'ÚLTIMAS 10 TRANSAÇÕES DO CLIENTE:';

FOR TRANSACAO IN
SELECT *
FROM TRANSACTIONS
WHERE CLIENTE_ID = P_CLIENTE_ID
ORDER BY REALIZADA_EM DESC
LIMIT 10
LOOP
CONTADOR := CONTADOR + 1;

RAISE NOTICE 'ID: %, TIPO: %, DESCRIÇÃO: %, VALOR: %, DATA: %', TRANSACAO.ID, TRANSACAO.TIPO, TRANSACAO.DESCRICAO, TRANSACAO.VALOR, TRANSACAO.REALIZADA_EM;

EXIT
WHEN CONTADOR >= 10;

END LOOP;

END;

$$;


-- STORED PROCEDURE COM SALDO DE TRANSACAO

CREATE OR REPLACE PROCEDURE REALIZAR_TRANSACAO(
IN P_TIPO CHAT(1), IN P_DESCRICAO VARCHAR(10), IN P_VALOR INTEGER, IN P_CLIENTE_ID UUID
)
LANGUAGE PLPGSQL
AS $$
DECLARE
SALDO_ATUAL INTEGER;

LIMITE_CLIENTE INTEGER;

SALDO_APOS_TRANSACAO INTEGER;

BEGIN
SELECT SALDO, LIMITE INTO SALDO_ATUAL, LIMITE_CLIENTE
FROM CLIENTS
WHERE ID = P_CLIENTE_ID;

RAISE NOTICE 'SALDO ATUAL DO CLIENTE: %', SALDO_ATUAL;

RAISE NOTICE 'LIMITE ATUAL DO CLIENTE: %', LIMITE_CLIENTE;

IF P_TIPO = 'D'
AND SALDO_ATUAL - P_VALOR < - LIMITE_CLIENTE THEN
RAISE EXCEPTION 'LIMITE INFERIOR AO NECESSARIO DA TRANSACAO';
END IF;

UPDATE CLIENTS
SET
SALDO = SALDO + CASE WHEN P_TIPO = 'D' THEN -P_VALOR
ELSE P_VALOR END
WHERE ID = P_CLIENTE_ID;

INSERT INTO TRANSACTIONS (TIPO, DESCRICAO, VALOR, CLIENTE_ID)
VALUES (P_TIPO, P_DESCRICAO, P_VALOR, P_CLIENTE_ID);

SELECT SALDO INTO SALDO_APOS_TRANSACAO
FROM CLIENTS
WHERE ID = P_CLIENTE_ID;

RAISE NOTICE 'SALDO CLIENTE APOS TRANSACAO: %', SALDO_APOS_TRANSACAO;

END;

$$;