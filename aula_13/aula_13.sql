--CRIAÇÃO DA TABELA:


CREATE TABLE PESSOAS (
ID SERIAL PRIMARY KEY, FIRST_NAME VARCHAR(3), LAST_NAME VARCHAR(3), ESTADO VARCHAR(3)
);

--INSERÇÃO DE 1 MILHÃO DE REGISTROS:

CREATE OR REPLACE FUNCTION RANDOM_ESTADO()
RETURNS VARCHAR(3) AS $$
BEGIN
RETURN CASE FLOOR(RANDOM() * 5)
WHEN 0 THEN 'SP'
WHEN 1 THEN 'RJ'
WHEN 2 THEN 'MG'
WHEN 3 THEN 'ES'
ELSE 'DF'
END;
END;

$$ LANGUAGE PLPGSQL;

-- INSERIR DADOS NA TABELA PESSOAS COM ESTADOS ALEATÓRIOS

INSERT INTO PESSOAS (FIRST_NAME, LAST_NAME, ESTADO)
SELECT SUBSTRING(MD5(RANDOM()::TEXT), 0, 3), SUBSTRING(MD5(RANDOM()::TEXT), 0, 3), RANDOM_ESTADO()
FROM GENERATE_SERIES(1, 10000000);

--CRIANDO UM INDEX NO FIRST_NAME

CREATE INDEX FIRST_NAME_INDEX ON
PESSOAS(FIRST_NAME)

--FAZENDO UMA BUSCA USANDO UM INDEX

SELECT COUNT(*)
FROM PESSOAS
WHERE FIRST_NAME = 'AA' --TOTAL QUERY RUNTIME: 585 MSEC.

--FAZENDO UMA BUSCA SEM USAR INDEX

SELECT COUNT(*) FROM PESSOAS WHERE LAST_NAME = 'AA';--TOTAL QUERY RUNTIME: 2 SECS 552 MSEC.

--VAMOS CRIAR UMA TABELA COM PARTICIONAMENTO

CREATE TABLE PESSOAS (
ID SERIAL PRIMARY KEY, FIRST_NAME VARCHAR(3), LAST_NAME VARCHAR(3), ESTADO VARCHAR(3)
) PARTITION BY RANGE (ID);


--OPÇÃO MAIS SIMPLES

CREATE TABLE PESSOAS_PART1 PARTITION OF PESSOAS FOR
VALUES
FROM(MINVALUE) TO (2000001);

CREATE TABLE PESSOAS_PART2 PARTITION OF PESSOAS FOR
VALUES
FROM(2000001) TO (4000001);

CREATE TABLE PESSOAS_PART3 PARTITION OF PESSOAS FOR
VALUES
FROM(4000001) TO (6000001);

CREATE TABLE PESSOAS_PART4 PARTITION OF PESSOAS FOR
VALUES
FROM(6000001) TO (8000001);

CREATE TABLE PESSOAS_PART5 PARTITION OF PESSOAS FOR
VALUES
FROM(8000001) TO (MAXVALUE);


--OPÇÃO INDIRETA
-- CRIAR AS TABELAS PARTICIONADAS
CREATE TABLE PESSOAS_PART1 (
LIKE PESSOAS INCLUDING ALL, CHECK (ID >= 1
AND ID <= 2000000)
);

CREATE TABLE PESSOAS_PART2 (
LIKE PESSOAS INCLUDING ALL, CHECK (ID > 2000000
AND ID <= 4000000)
);

CREATE TABLE PESSOAS_PART3 (
LIKE PESSOAS INCLUDING ALL, CHECK (ID > 4000000
AND ID <= 6000000)
);

CREATE TABLE PESSOAS_PART4 (
LIKE PESSOAS INCLUDING ALL, CHECK (ID > 6000000
AND ID <= 8000000)
);

CREATE TABLE PESSOAS_PART5 (
LIKE PESSOAS INCLUDING ALL, CHECK (ID > 8000000)
);-- A ÚLTIMA PARTIÇÃO NÃO PRECISA DE LIMITE SUPERIOR


ALTER TABLE PESSOAS ATTACH PARTITION PESSOAS_PART1 FOR
VALUES
FROM(MINVALUE) TO (2000001);

ALTER TABLE PESSOAS ATTACH PARTITION PESSOAS_PART2 FOR
VALUES
FROM(2000001) TO (4000001);

ALTER TABLE PESSOAS ATTACH PARTITION PESSOAS_PART3 FOR
VALUES
FROM(4000001) TO (6000001);

ALTER TABLE PESSOAS ATTACH PARTITION PESSOAS_PART4 FOR
VALUES
FROM(6000001) TO (8000001);

ALTER TABLE PESSOAS ATTACH PARTITION PESSOAS_PART5 FOR
VALUES
FROM(8000001) TO (MAXVALUE);

INSERT INTO PESSOAS (FIRST_NAME, LAST_NAME, ESTADO)
SELECT SUBSTRING(MD5(RANDOM()::TEXT), 0, 3), SUBSTRING(MD5(RANDOM()::TEXT), 0, 3), RANDOM_ESTADO()
FROM GENERATE_SERIES(1, 10000000);

SELECT *
FROM PESSOAS
CRIANDO COM BASE EM LISTA
CREATE TABLE PESSOAS (
ID SERIAL, FIRST_NAME VARCHAR(3), LAST_NAME VARCHAR(3), ESTADO VARCHAR(3), PRIMARY KEY (ID, ESTADO)
) PARTITION BY LIST (ESTADO);

-- CRIAR AS PARTIÇÕES
CREATE TABLE PESSOAS_SP PARTITION OF PESSOAS FOR
VALUES IN ('SP');

CREATE TABLE PESSOAS_RJ PARTITION OF PESSOAS FOR
VALUES IN ('RJ');

CREATE TABLE PESSOAS_MG PARTITION OF PESSOAS FOR
VALUES IN ('MG');

CREATE TABLE PESSOAS_ES PARTITION OF PESSOAS FOR
VALUES IN ('ES');

CREATE TABLE PESSOAS_DF PARTITION OF PESSOAS FOR
VALUES IN ('DF');